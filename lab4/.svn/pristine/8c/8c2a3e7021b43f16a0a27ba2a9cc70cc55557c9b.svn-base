#include <lcom/lcf.h>

#include "mouse.h"
#include "mouse_macros.h"


static int hook_id_mouse;
struct packet pack;
int byte_no = 0;


//subscribes mouse interruptions
int subscribe_mouse(uint8_t *bit_no) {
    hook_id_mouse = MOUSE_IRQ;
    *bit_no = hook_id_mouse;

    if (sys_irqsetpolicy(MOUSE_IRQ,IRQ_REENABLE|IRQ_EXCLUSIVE,&hook_id_mouse) != 0) {
        printf("Unable to subscribe mouse interruptions");
        return 1;
    }

    printf("SUB\n");
    return 0;
}


//unubscribes mouse interruptions
int unsubscribe_mouse() {
    if (sys_irqrmpolicy(&hook_id_mouse) != 0) {
        printf("Unable to unsubscribe mouse interruptions");
        return 1;
    }

    printf("UNSUB\n");
    return 0;
}


int kbc_read_status(uint8_t * status) {
    uint32_t temp;

    if(sys_outb(KBC_CMD_REG,READ_CMD) != 0) {
        printf("Error reading configuration");
        return 1;
    }
    if(sys_inb(OUT_BUF,&temp) != 0) {
        printf("Error reading configuration");
        return 1;
    } 

    *status = (uint8_t) temp;

    return 0;
}

bool empty_obf() {
    uint8_t status;
    kbc_read_status(&status);

    if (status & OBF) {
        return false;
    }
    else {
        return true;
    }
}

bool empty_ibf() {
    uint8_t status;
    kbc_read_status(&status);

    if (status & IBF) {
        return false;
    }
    else {
        return true;
    }
}



int write_mouse_command(uint8_t command) {
    uint32_t ret;

    int error_count = 0;
    while (error_count < 5) {
        /*
        if (!empty_ibf()) { //checks if obf is empty
            printf("DID NOT SEND YET");
            continue;
        }
        */
        
        //else {

            if(sys_outb(KBC_CMD_REG,WRITE_MOUSE) != 0) { //tells kbc to write to mouse
                printf("Failed to write to mouse\n");
                return 1;
            }

            if(sys_outb(KBC_ARGS_REG, command) != 0) { //sets stream mode
                printf("Failed to write command\n");
                return 1;
            }

            tickdelay(micros_to_ticks(DELAY_US)); //wait for the acknowledgement

            if (sys_inb(KBC_RET_REG,&ret) != 0) { //reads acknowledgement
                printf("Failed to read return\n");
                return 1;
            }

            if (ret == ACK ) { 
                return 0;
            }
            else if (ret == NACK) {
                continue;
            }
            else {
                error_count++;
                continue;
            }

        //} 
    }

    return 1;
}

int mouse_set_stream_mode() {
    if (write_mouse_command(SET_STREAM_MODE) != 0) {
        printf("Failed to set mouse to stream mode\n");
        return 1;
    }
    else {
        return 0;
    }
}

int mouse_set_remote_mode() {
    if(write_mouse_command(SET_REMOTE_MODE) != 0) {
        printf("Failed to set mouse to remote mode\n");
        return 1;
    }
    else {
        return 0;
    }
}

int mouse_enable_data_rep() {
    printf("ENABLING DATA REP...\n");
    if(write_mouse_command(ENABLE_REP) != 0) {
        printf("Failed enable data reporting\n"); 
        return 1;
    }
    else {
        printf("DATA REP ENABELED\n");
        return 0;
    }
}

int mouse_disable_data_rep() {
    if(write_mouse_command(DISABLE_REP) != 0) {
        printf("Failed disable data reporting\n"); 
        return 1;
    }
    else {
        return 0;
    }
}

int clear_obf() {
    uint32_t temp;

    if (sys_inb(OUT_BUF, &temp) != 0) {
        return 1;
    }
    return 0;
}

void (mouse_ih) (void) {
    uint32_t temp;
    //uint8_t status;
    uint8_t curr_byte;

    //kbc_read_status(&status);

    //if (status & OBF) {
        sys_inb(OUT_BUF, &temp);
        /*
        if ((status & PARITY) || (status & TIMEOUT) {
            printf("Returned\n");
            return;
        }
        */
        //else{
            curr_byte = (uint8_t) temp;
            //printf("B[%d]:%x\n",byte_no,curr_byte);

            pack.bytes[byte_no  % 3] = curr_byte;

            byte_no++;

            return;
        //}
    //}
}


uint16_t revert_2_complement_x(uint8_t num) {
    uint16_t num_cpy = num;
    if (BIT(4) & pack.bytes[0]) { //test if number is negative
        num_cpy -= 256;
        return num_cpy;
    }
    else { //number is positive -> return it 
        return num;
    }
}

uint16_t revert_2_complement_y(uint8_t num) {
    uint16_t num_cpy = num;
    if (BIT(5) & pack.bytes[0]) { //test if number is negative
        num_cpy -= 256;
        return num_cpy;
    }
    else { //number is positive -> return it 
        return num;
    }
}
 





